#include <PID_v1.h>

// Define os pinos do motor e do encoder
const int motorPWM = 3;
const int motorDir1 = 4;
const int motorDir2 = 5;
const int encoderA = 2;  // Interrupt pin
const int encoderB = 7;

// Define os pinos dos botões
const int button1 = 8;
const int button2 = 9;
const int button3 = 10;

// Variáveis para o encoder
volatile long encoderPosition = 0;
long targetPosition = 0;  // Posição alvo (em ticks do encoder)

// Posições dos andares (em ticks do encoder)
const long floor1Position = 0;
const long floor2Position = 1000;
const long floor3Position = 2000;

// Variáveis para o PID
double input, output, setpoint;
double Kp = 1.0, Ki = 1.0, Kd = 0.1;  // Ajuste estes valores conforme necessário
PID myPID(&input, &output, &setpoint, Kp, Ki, Kd, DIRECT);

void setup() {
  // Configuração dos pinos do motor
  pinMode(motorPWM, OUTPUT);
  pinMode(motorDir1, OUTPUT);
  pinMode(motorDir2, OUTPUT);
  
  // Configuração dos pinos do encoder
  pinMode(encoderA, INPUT);
  pinMode(encoderB, INPUT);
  attachInterrupt(digitalPinToInterrupt(encoderA), updateEncoder, CHANGE);

  // Configuração dos botões
  pinMode(button1, INPUT_PULLUP);
  pinMode(button2, INPUT_PULLUP);
  pinMode(button3, INPUT_PULLUP);

  // Inicialização do PID
  setpoint = targetPosition;
  myPID.SetMode(AUTOMATIC);
  myPID.SetOutputLimits(-255, 255);  // PWM range
}

void loop() {
  // Verificar se algum botão foi pressionado para selecionar o andar
  if (digitalRead(button1) == LOW) {
    targetPosition = floor1Position;
  } else if (digitalRead(button2) == LOW) {
    targetPosition = floor2Position;
  } else if (digitalRead(button3) == LOW) {
    targetPosition = floor3Position;
  }

  // Atualiza a entrada do PID com a posição atual do encoder
  input = encoderPosition;
  
  // Atualiza o setpoint do PID com a posição alvo
  setpoint = targetPosition;

  // Calcula a saída do PID
  myPID.Compute();
  
  // Controla o motor de acordo com a saída do PID
  if (output > 0) {
    analogWrite(motorPWM, output);
    digitalWrite(motorDir1, HIGH);
    digitalWrite(motorDir2, LOW);
  } else {
    analogWrite(motorPWM, -output);
    digitalWrite(motorDir1, LOW);
    digitalWrite(motorDir2, HIGH);
  }
}

// Função de interrupção do encoder
void updateEncoder() {
  int MSB = digitalRead(encoderA);
  int LSB = digitalRead(encoderB);
  
  if (MSB == HIGH) {
    if (LSB == LOW) {
      encoderPosition++;
    } else {
      encoderPosition--;
    }
  } else {
    if (LSB == LOW) {
      encoderPosition--;
    } else {
      encoderPosition++;
    }
  }
}
